/***********************************************************************************************
** Program name: Lab 7
** Author: Jordan Hamilton
** Date: 11/10/2018
** Description: This fantasy fighter game prompts the user to select two fighters from the
** following possible choices: Barbarian, Blue Men, Harry Potter, Medusa, and Vampire. Once
** selected, the characters are initialized with their unique attributes and a random character
** randomly attacks the other character. The fight continues, displaying results until one
** Character's strength is depleted.
***********************************************************************************************/

#include <iostream>

#include "Menu.hpp"
#include "Queue.hpp"

using std::cout;
using std::endl;

void populateMenu(Menu *mainMenu);

/***********************************************************************************************
** Description: This program can be run via the lab7 executable generated by make.
***********************************************************************************************/
int main() {

  int choice;
  Menu* mainMenu = nullptr;
  Queue* queue = nullptr;

  mainMenu = new Menu("Select from the following options:");
  populateMenu(mainMenu);

  queue = new Queue;

  do {

    choice = mainMenu->getIntChoiceFromPrompt(1, mainMenu->getMenuChoices(), true);

    cout << endl;

    switch (choice)  {

      case 1 : queue->addBack( mainMenu->getIntChoiceFromPrompt("Enter an integer to add to the back of the queue:", -100000, 100000, false) );
               break;

      case 2 : if ( !queue->isEmpty() ) {
                  cout << queue->getFront() << endl;
               } else {
                  cout << "No values exist in this queue." << endl;
               }

               break;

      case 3 : if ( !queue->isEmpty() ) {
                  queue->removeFront();
               } else {
                  cout << "No values exist in this queue." << endl;
               }

               break;

      case 4 : queue->printQueue();
               break;

      default : {}

    }

    cout << endl;

  } while(choice != 5);

  if (queue) {
    delete queue;
    queue = nullptr;
  }

  delete mainMenu;
  mainMenu = nullptr;

  return 0;

}


void populateMenu(Menu* mainMenu) {

  mainMenu->addMenuItem("Add a value to the back of the queue");
  mainMenu->addMenuItem("Display the front value");
  mainMenu->addMenuItem("Remove the front node");
  mainMenu->addMenuItem("Display the queue's content");
  mainMenu->addMenuItem("Exit");

}
